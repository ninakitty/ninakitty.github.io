{"posts":[{"title":"pycharm plugin","text":"自用 IntelliJ IDEA Vim 插件配置 Prefrence: https://einverne.github.io/post/2020/12/my-idea-vimrc-config.html https://gist.github.com/zhangjian98/ecd67c8463bab649295707ba6c3fb363 写在前面本配置文件用到的插件如下： IdeaVim IdeaVim-EasyMotion IdeaVimExtension which-key (Vim快捷键提示插件) CodeGlance Pro (右侧代码小地图） Translation (翻译插件) 以上插件需要从idea的插件市场安装 配置文件说明：本配置文件（.ideavimrc）包含8大块内容，分别为 Extensions:vim插件列表 Basic settings：基础配置 No Leader Keymaps：非快捷键配置 Leader Keymaps：键设置（本配置为空格键，可自行修改） Which-Key：which-key配置 目录-食用手册：带 的快捷键的索引 详细配置：带的快捷键的详细配置 NERDTree：目录列表创建配置 配置文件：别的不多说，直接上配置文件quot;该“中文版”指whichkey的窗口提示为中文&quot;另外一个版本的供各位拿去装逼用[Doge]&quot; ================================================================================================&quot; 🍰🍰🍰 Extensions 🍰🍰🍰&quot; ================================================================================================Plug 'preservim/nerdtree'Plug 'easymotion/vim-easymotion'Plug 'tpope/vim-surround'&quot;下列插件需要在IDEA中下载&quot;ideaVim&quot;IdeaVim-EasyMotion&quot;IdeaVimExtension&quot;which-key&quot;CodeGlance Pro&quot;Translation&quot; ================================================================================================&quot; 🐧🐧🐧 Basic settings 🐧🐧🐧&quot; ================================================================================================set easymotion&quot;设置在光标距离窗口顶部或底部一定行数时，开始滚动屏幕内容的行为set scrolloff=10&quot;--递增搜索功能：在执行搜索（使用 / 或 ? 命令）时，&quot;Vim 会在您输入搜索模式的过程中逐步匹配并高亮显示匹配的文本。set incsearch&quot;--在搜索时忽略大小写set ignorecase&quot;--将搜索匹配的文本高亮显示set hlsearch&quot;--设置相对行号 和 当前行的绝对行号set number relativenumber&quot;--设置返回normal模式时回到英文输入法&quot;set keep-english-in-normal&quot;--将 Vim 的寄存器与系统剪贴板共享set clipboard=unnamedplus&quot; ================================================================================================&quot; 🌍🌍🌍 No Leader Keymaps 🌍🌍🌍&quot; ================================================================================================&quot;--普通模式下使用回车键，向下/向上 增加一行nmap &lt;CR&gt; o&lt;Esc&gt;nmap &lt;S-Enter&gt; O&lt;Esc&gt;&quot;--在普通和插入模式下，向下交换行/向上交换行nnoremap &lt;C-j&gt; :m +1&lt;CR&gt;nnoremap &lt;C-k&gt; :m -2&lt;CR&gt;inoremap &lt;C-j&gt; &lt;Esc&gt; :m +1&lt;CR&gt;giinoremap &lt;C-k&gt; &lt;Esc&gt; :m -2&lt;CR&gt;gixnoremap &lt;C-j&gt; :m '&gt;+1&lt;cr&gt;gv=gvxnoremap &lt;C-k&gt; :m '&lt;-2&lt;cr&gt;gv=gv&quot;--将shift+j/k映射为向下/向上跳转5行nnoremap J 5jnnoremap K 5k&quot;--将 jj 和 jk 映射为 &lt;Esc&gt;&quot;jj和jk为主流配置，可按喜好自行调整&quot;imap jj &lt;Esc&gt;&quot;imap jk &lt;Esc&gt;&quot;--在插入模式下，使用Alt+hjkl进行光标移动inoremap &lt;A-j&gt; &lt;Down&gt;inoremap &lt;A-k&gt; &lt;Up&gt;inoremap &lt;A-h&gt; &lt;Left&gt;inoremap &lt;A-l&gt; &lt;Right&gt;inoremap &lt;A-S-L&gt; &lt;End&gt;inoremap &lt;A-S-H&gt; &lt;Home&gt;&quot;--格式化（规范化）文本，即对选定的文本进行换行或重排，适应指定的文本宽度。&quot;全文规范化：Ctrl+Alt+lmap Q gq&quot;跳转到下一个错误或警告nmap ge &lt;action&gt;(GotoNextError)let g:WhichKeyDesc_GotoNextError = &quot;ge 跳转到下一个错误或警告&quot;&quot;在源代码和测试代码之间快速切换nmap gt &lt;action&gt;(GotoTest)let g:WhichKeyDesc_GotoTest = &quot;gt 在源代码和测试代码之间快速切换&quot;&quot;将光标移动到上一个方法的声明处&quot; last changed in current buffer(file)nmap gm &lt;action&gt;(MethodUp)let g:WhichKeyDesc_MethodUp = &quot;gm 将光标移动到上一个方法的声明处&quot;&quot;跳转到当前接口或抽象类的实现处nmap ga &lt;action&gt;(GotoImplementation)let g:WhichKeyDesc_GotoImplementation = &quot;ga 跳转到当前接口或抽象类的实现处&quot;&quot; bookmark 切换书签nmap ma &lt;action&gt;(ToggleBookmark)let g:WhichKeyDesc_bookmark = &quot;ma 书签&quot;&quot;切换标签页nmap L &lt;action&gt;(NextTab)nmap H &lt;action&gt;(PreviousTab)&quot;将Ctrl + s 映射为保存文档(也可以在VIM设置里将此快捷键设置为IDEA的快捷键)nmap &lt;C-S&gt; &lt;action&gt;(SaveAll)imap &lt;C-S&gt; &lt;Esc&gt;&lt;action&gt;(SaveAll)&quot;注释/取消注释 这一行/选中行nmap gc :action CommentByLineComment&lt;CR&gt;vmap gc :action CommentByLineComment&lt;CR&gt;&quot; e: Extract&quot; extract method/function 将选中的代码片段提取为一个独立的方法(Ctrl + Alt + M)vmap &lt;leader&gt;em &lt;action&gt;(ExtractMethod)&quot; extract constant （引入常量）的重构操作:将选中的代码片段抽取为一个常量，并自动替换选中的代码片段为新的常量引用(Ctrl + Alt + C)vmap &lt;leader&gt;ec &lt;action&gt;(IntroduceConstant)&quot; extract field （引入字段）的重构操作:将选中的代码片段转化为一个新的字段，并自动将选中的代码片段替换为对该字段的引用(Ctrl + Alt + F)vmap &lt;leader&gt;ef &lt;action&gt;(IntroduceField)&quot; extract variable （引入变量）的重构操作:将选中的代码片段抽取为一个新的变量，并自动替换选中的代码片段为新的变量引用(Ctrl + Alt + V)vmap &lt;leader&gt;ev &lt;action&gt;(IntroduceVariable)&quot; ================================================================================================&quot; ⭐️⭐️⭐️ Leader Keymaps ⭐️⭐️⭐️ =====================================&quot; ================================================================================================&quot;--将&lt;leader&gt;设置为 空格 键&quot;可自行更改，只需更改双引号内的内容即可&quot;推荐&lt;leader&gt;: &quot;空格&quot; &quot;;&quot; &quot;\\&quot; &quot;-&quot; &quot;,&quot;let mapleader = &quot; &quot;&quot; ================================================================================================&quot; 👻👻👻 Which-Key 👻👻👻&quot; ================================================================================================&quot;which-key的官方推荐配置set which-keyset notimeout&quot; ================================================================================================&quot; 🌞🌞🌞 目录-食用手册 🌞🌞🌞&quot; ================================================================================================&quot;===================================== A =====================================&quot; a:&quot;===================================== B =====================================&quot; b:&quot;===================================== C =====================================&quot; c: CodeAndClose-[目录]🎈&quot; cc: CodeCompletion-自动补全&quot; cd: CloseEditor-关闭当前标签页&quot; ca: CloseAllEditors-关闭所有标签页&quot; co: CloseAllEditorsButActive-关闭其他标签页&quot;===================================== D =====================================&quot; d: DebugOrDelete-[目录]🎈&quot; dp: BreakPoint-打断点/解除断点&quot; db: DeBug-调试&quot; [V]d: DeleteAndCopyClipboard-在可视模式中：删除选择的文本并复制到剪切板&quot;===================================== E =====================================&quot; e: ToggleExplorer ⭐️ 激活项目工具窗口&quot;===================================== F =====================================&quot; f: Find/Format ⭐🎈[目录]&quot; ff: FindFile-快速 导航/查找 项目中的其他文件(Ctrl + n)&quot; fl: FindFileLocation-将当前编辑的文件在项目视图中进行选中定位(Ctrl+f)&quot; ft: FindText-在整个项目中查找指定的文本、关键字或正则表达式，包括代码文件、配置文件和其他文件等(Ctrl + Shift + F)&quot; fc: Commands-打开 &quot;Find Action&quot;（查找动作）对话框(Ctrl + Shift + A)&quot; fm: Format-重新格式化代码，使其符合预定义的代码样式和规范 and 优化导入语句，删除未使用的导入，并将导入语句按字母顺序进行排列&quot;===================================== G =====================================&quot; g: GitOrGenerate 🎈[目录]&quot; gr: RollbackHunk-执行版本控制（VCS）的回滚操作，将修改的代码还原到之前的版本&quot; gc: GenerateConstructor-生成构造函数&quot; gg: GenerateGetter-生成getter函数&quot; gs: GenerateSetter-生成setter函数&quot; ga: GenerateGetterAndSetter-生成getter和setter函数&quot; ge: GenerateEquals-生成equals和hashcode的重写方法&quot; gd: ShowTabbedFileHistory-显示文件的版本控制历史(git)&quot;===================================== H =====================================&quot; h: MoveToLeftMoveToLeft-跳转到左边的分割窗口&quot;===================================== I =====================================&quot; i: Insert 显示提示&quot;===================================== J =====================================&quot; j: MoveToDown-跳转到下边的分割窗口&quot;===================================== K =====================================&quot; k: MoveToUp-跳转到上边的分割窗口&quot;===================================== L =====================================&quot; l: MoveToRight-跳转到右边的分割窗口&quot;===================================== M =====================================&quot; m: CodeGlance-打开/关闭地图(需要CodeGlance Pro插件)&quot;===================================== N =====================================&quot; n: NERDTreeOrNo ⭐️[目录]🎈&quot; nn: NERDTreeFocus-将使焦点转移到 NERDTree 窗口(配置在NERDTree专栏)&quot; nh: NoHighlight-取消搜索高亮显示&quot; nd: NewDir-新建文件夹&quot; nc: NewClass-新建类&quot;===================================== O =====================================&quot; o:&quot;===================================== P =====================================&quot; p: PasteClipboardDown-从剪切板粘贴到下面行&quot; P: PasteClipboardUp-从剪切板粘贴到上面行&quot; [V]p: PasteClipboardDown-在可视模式中：从剪切板粘贴到下面行&quot; [V]P: PasteClipboardUp-在可视模式中：从剪切板粘贴到上面行&quot;===================================== Q =====================================&quot; q:&quot;===================================== R =====================================&quot; r: Run/Re ⭐️[目录]🎈&quot; ru: Run-运行&quot; rc: RunClass-运行当前编辑器中的文件或类(Shift + F10)&quot; rr: ReRun-重新运行最近一次运行的程序或测试(Ctrl + Shift + F10)&quot; rt: ReRunTests-重新运行最近一次运行的测试（Unit Tests）(Ctrl + Shift + F10)&quot; rn: Rename-在代码中快速更改一个标识符的名称，并自动处理所有相关的引用(Shift + F6)&quot;===================================== S =====================================&quot; s: Show&amp;Stop ⭐️[目录]🎈&quot; st: Stop&quot; ss: ShowFileStructure-显示当前打开文件的文件结构弹出窗口，其中包含文件中的类、方法、字段等结构(Alt + 7)&quot; sb: ShowBookmarks-显示书签（Bookmarks）工具窗口，其中包含当前文件中设置的书签列表(Ctrl + F11)&quot; sp: ShowParameterInfo-用于显示方法或函数的参数信息(Ctrl + p)&quot;===================================== T =====================================&quot; t: Translate-翻译(需要Translate插件)&quot;===================================== U =====================================&quot; u:&quot;===================================== V =====================================&quot; v:&quot;===================================== W =====================================&quot; w: Window ⭐️[目录]🎈&quot; wc: CloseSplitTab-关闭当前分割窗口(ctrl+w+c)&quot; wu: Unsplit-恢复当前分割窗口&quot; wa: UnsplitAll-恢复所有分割窗口&quot; wml: MoveTabRight-向右拆分标签页&quot; wmd: MoveTabDown-向下拆分标签页&quot; wmc: SplitVertically-向右复制标签页&quot; wmo: MoveEditorToOppositeTabGroup-在另一边打开（前提是有另一边的分割窗口）&quot; wl: MoveToRight-跳转到右边的窗口(&lt;c-w&gt;l)&quot; wh: MoveToLeft-跳转到左边的窗口(&lt;c-w&gt;h)&quot; wk: MoveToUp-跳转到上边的窗口(&lt;c-w&gt;k)&quot; wj: MoveToDown-跳转到下边的窗口(&lt;c-w&gt;j)&quot; ww: HideAllWindows-隐藏/显示活动窗口(Ctrl+Shift+F12)&quot;===================================== X =====================================&quot; x:&quot;===================================== Y =====================================&quot; y: CopyClipboard-将选中行复制到剪切板&quot; [V]y: CopyClipboard-在可视模式中：将选中文字复制到剪切板&quot;===================================== Z =====================================&quot; z: zip(fold) ⭐️[目录]🎈&quot; zo: unZipAll-展开所有代码折叠区域(Ctrl + Shift + 加号键)&quot; zc: ZipAll-折叠所有代码折叠区域(Ctrl + Shift + 减号键)&quot;=============================================================================&quot;=============================================================================&quot;=============================================================================&quot; ================================================================================================&quot; 🌟🌟🌟 &lt;leader&gt;详细配置 🌟🌟🌟&quot; ================================================================================================&quot;========= NULL ========&quot;这一行为在按下&lt;leader&gt;后显示的,甭管就行let g:WhichKeyDesc_LeaderKeymap= &quot;&lt;leader&gt; 🌟🌟🌟紫色为二级目录🌟🌟🌟&quot;&quot;========== b ==========&quot;========== c =========clet g:WhichKeyDesc_CodeAndClose = &quot;&lt;leader&gt;c Code&amp;关闭&quot;&quot;关闭所有标签页let g:WhichKeyDesc_CodeAndClose_CloseAllEditors = &quot;&lt;leader&gt;ca 关闭所有标签页&quot;nmap &lt;leader&gt;ca &lt;action&gt;(CloseAllEditors)&quot;关闭当前标签页let g:WhichKeyDesc_CodeAndClose_CloseEditor = &quot;&lt;leader&gt;cd 关闭当前标签页&quot;nmap &lt;leader&gt;cd :action CloseEditor&lt;CR&gt;&quot;代码自动补全let g:WhichKeyDesc_CodeAndClose_CodeCompletion = &quot;&lt;leader&gt;cc 代码自动补全&quot;nmap &lt;leader&gt;cc &lt;action&gt;(CodeCompletion)&quot;关闭其他标签页let g:WhichKeyDesc_CodeAndClose_CloseAllEditorsButActive = &quot;&lt;leader&gt;co 关闭其他标签页&quot;nmap &lt;leader&gt;co :action CloseAllEditorsButActive&lt;CR&gt;&quot;========== d ==========let g:WhichKeyDesc_DeBugOrDelete= &quot;&lt;leader&gt;d 调试&amp;删除&quot;&quot;打断点/解除断点let g:WhichKeyDesc_DebugOrDelete_BreakPoint = &quot;&lt;leader&gt;dp 打断点/解除断点 &quot;nmap &lt;leader&gt;dp &lt;Action&gt;(ToggleLineBreakpoint)&quot;调试let g:WhichKeyDesc_DebugOrDelete_DeBug = &quot;&lt;leader&gt;db 调试&quot;nmap &lt;leader&gt;db &lt;Action&gt;(Debug)&quot;在可视模式中：删除选择的文本并复制到剪切板let g:WhichKeyDesc_DebugOrDelete_DeleteAndCopyToClipboard = &quot;&lt;leader&gt;dd 删除并复制到剪切板&quot;vmap &lt;leader&gt;dd &quot;+d&quot;========== e ==========&quot;激活项目工具窗口(Alt + 1)let g:WhichKeyDesc_ToggleExplorerOrExtract = &quot;&lt;leader&gt;e 打开文件列表&quot;nmap &lt;leader&gt;e &lt;action&gt;(ActivateProjectToolWindow)&quot;========== f ==========let g:WhichKeyDesc_FindOrFormat = &quot;&lt;leader&gt;f 查找&amp;格式化&quot;&quot;快速 导航/查找 项目中的其他文件(Ctrl + n)let g:WhichKeyDesc_FindOrFormat_FindFile = &quot;&lt;leader&gt;ff 查找文件&quot;nmap &lt;leader&gt;ff &lt;action&gt;(GotoFile)&quot;将当前编辑的文件在项目视图中进行选中定位(Alt + F1)let g:WhichKeyDesc_FindOrFormat_FindFileLocation = &quot;&lt;leader&gt;fl 定位文件位置&quot;nmap &lt;leader&gt;fl &lt;action&gt;(SelectInProjectView)&quot;在整个项目中查找指定的文本、关键字或正则表达式，包括代码文件、配置文件和其他文件等(Ctrl + Shift + F)let g:WhichKeyDesc_FindOrFormat_FindText = &quot;&lt;leader&gt;ft 查找字符&quot;nmap &lt;leader&gt;ft &lt;action&gt;(FindInPath)&quot;打开 &quot;Find Action&quot;（查找动作）对话框(Ctrl + Shift + A)let g:WhichKeyDesc_FindOrFormat_Commands = &quot;&lt;leader&gt;fc 打开查找菜单&quot;nmap &lt;leader&gt;fc &lt;action&gt;(GotoAction)&quot;重新格式化代码，使其符合预定义的代码样式和规范 \\| 优化导入语句，删除未使用的导入，并将导入语句按字母顺序进行排列let g:WhichKeyDesc_FindOrFormat_Format = &quot;&lt;leader&gt;fm 格式化代码&quot;nmap &lt;leader&gt;fm &lt;action&gt;(ReformatCode) \\| &lt;action&gt;(OptimizeImports)&quot;========== g ==========let g:WhichKeyDesc_GitOrGenerate = &quot;&lt;leader&gt;g Git&amp;构造&quot;&quot;执行版本控制（VCS）的回滚操作，将修改的代码还原到之前的版本let g:WhichKeyDesc_GitOrGenerate_RollbackHunk = &quot;&lt;leader&gt;gr git回滚&quot;nmap &lt;leader&gt;gr :action Vcs.RollbackChangedLines&lt;CR&gt;&quot;生成构造器let g:WhichKeyDesc_GitOrGenerate_GenerateConstructor = &quot;&lt;leader&gt;gc 生成构造器&quot;nmap &lt;leader&gt;gc :action GenerateConstructor&lt;CR&gt;&quot;生成getterlet g:WhichKeyDesc_GitOrGenerate_GenerateGetter = &quot;&lt;leader&gt;gg 生成getter&quot;nmap &lt;leader&gt;gg :action GenerateGetter&lt;CR&gt;&quot;生成setterlet g:WhichKeyDesc_GitOrGenerate_GenerateSetter = &quot;&lt;leader&gt;gs 生成setter&quot;nmap &lt;leader&gt;gs :action GenerateSetter&lt;CR&gt;&quot;生成setter和getterlet g:WhichKeyDesc_GitOrGenerate_GenerateGetterAndSetter = &quot;&lt;leader&gt;ga 生成setter和getter&quot;nmap &lt;leader&gt;ga &lt;action&gt;(GenerateGetterAndSetter)&quot;生成 equals() 和 hashcode() 的重写方法let g:WhichKeyDesc_GitOrGenerate_GenerateEquals = &quot;&lt;leader&gt;ge 生成equals和hashcode的重写&quot;nmap &lt;leader&gt;ge &lt;action&gt;(GenerateEquals)&quot;生成toStringlet g:WhichKeyDesc_GitOrGenerate_GenerateToString = &quot;&lt;leader&gt;gt 生成toString&quot;nmap &lt;leader&gt;gt &lt;action&gt;(Actions.ActionsPlugin.GenerateToString)&quot;diff 显示文件的版本控制历史(git)nmap &lt;leader&gt;gd &lt;action&gt;(Vcs.ShowTabbedFileHistory)let g:WhichKeyDesc_DebugOrDelete_ShowTabbedFileHistory = &quot;&lt;leader&gt;gd 显示文件的版本控制历史&quot;&quot;========== h ==========&quot;跳转到左边的分割窗口let g:WhichKeyDesc_Show_MoveToLeft = &quot;&lt;leader&gt;h 向左跳转&quot;nmap &lt;leader&gt;h &lt;c-w&gt;h&quot;========== i ==========&quot;快速查找并跳转到下一个以 ( 开始的函数或方法调用的位置️let g:WhichKeyDesc_ShowIntentionActions = &quot;&lt;leader&gt;i 显示提示&quot;nmap &lt;leader&gt;i &lt;action&gt;(ShowIntentionActions)&quot;========== j ==========&quot;跳转到下边的分割窗口let g:WhichKeyDesc_Show_MoveToDown = &quot;&lt;leader&gt;j 向下跳转&quot;nmap &lt;leader&gt;j &lt;c-w&gt;j&quot;========== k ==========&quot;跳转到上边的分割窗口let g:WhichKeyDesc_Show_MoveToUp = &quot;&lt;leader&gt;k 向上跳转&quot;nmap &lt;leader&gt;k &lt;c-w&gt;k&quot;========== l ==========&quot;跳转到右边的窗口let g:WhichKeyDesc_Show_MoveToRight = &quot;&lt;leader&gt;l 向右跳转&quot;nmap &lt;leader&gt;l &lt;c-w&gt;l&quot;========== m ==========&quot;打开/关闭 代码小地图let g:WhichKeyDesc_CodeGlance = &quot;&lt;leader&gt;m 开关小地图&quot;nmap &lt;leader&gt;m &lt;action&gt;(CodeGlancePro.toggle)&quot;好像更新版本后,突然用不了了,用默认的ctrl+shift+G吧&quot;========== n ==========let g:WhichKeyDesc_NERDTreeOrNew = &quot;&lt;leader&gt;n 目录树&amp;新建&quot;&quot;取消搜索高亮显示(No Highlight)let g:WhichKeyDesc_NERDTreeOrNew_Highlight = &quot;&lt;leader&gt;nl 取消搜索高亮&quot;nmap &lt;leader&gt;nl :nohlsearch&lt;CR&gt;&quot;在当前目录新建文件夹let g:WhichKeyDesc_NERDTreeOrNew_NewDir = &quot;&lt;leader&gt;nd 新建文件夹&quot;nmap &lt;leader&gt;nd &lt;action&gt;(NewDir)&quot;在当前目录新建类let g:WhichKeyDesc_NERDTreeOrNew_NewClass = &quot;&lt;leader&gt;nc 新建.Class&quot;nmap &lt;leader&gt;nc &lt;action&gt;(NewClass)&quot;========== p ==========&quot;从剪切板粘贴到下面行let g:WhichKeyDesc_PasteClipboardDown = &quot;&lt;leader&gt;p 从剪切板粘贴到下面行&quot;nmap &lt;leader&gt;p &quot;+p&quot;从剪切板粘贴到上面行let g:WhichKeyDesc_PasteClipboardUp = &quot;&lt;leader&gt;P 从剪切板粘贴到上面行&quot;nmap &lt;leader&gt;P &quot;+P&quot;在可视模式中：从剪切板粘贴到下面行let g:WhichKeyDesc_PasteClipboardDown = &quot;&lt;leader&gt;p 从剪切板粘贴到下面行&quot;vmap &lt;leader&gt;p &quot;+p&quot;在可视模式中：从剪切板粘贴到上面行let g:WhichKeyDesc_PasteClipboardUp = &quot;&lt;leader&gt;P 从剪切板粘贴到上面行&quot;vmap &lt;leader&gt;P &quot;+P&quot;========== r ==========let g:WhichKeyDesc_RunOrRe = &quot;&lt;leader&gt;r 运行&amp;重新&quot;&quot;运行当前编辑器中的文件或类(Shift + F10)let g:WhichKeyDesc_RunOrRe_RunCalss = &quot;&lt;leader&gt;rc 运行当前文件&quot;nmap &lt;leader&gt;rc :action RunClass&lt;CR&gt;&quot;重新运行最近一次运行的程序或测试(Ctrl+Shift + F10)let g:WhichKeyDesc_RunOrRe_ReRun = &quot;&lt;leader&gt;rr 重新运行&quot;nmap &lt;leader&gt;rr &lt;action&gt;(Rerun)&quot;重新运行最近一次运行的测试（Unit Tests）(Ctrl + Shift + F10)let g:WhichKeyDesc_RunOrRe_ReRunTests = &quot;&lt;leader&gt;rt 重新运行Test&quot;nmap &lt;leader&gt;rt &lt;action&gt;(RerunTests)&quot;在代码中快速更改一个标识符的名称，并自动处理所有相关的引用(Shift + F6)let g:WhichKeyDesc_RunOrRe_Rename = &quot;&lt;leader&gt;rn 重构&quot;map &lt;leader&gt;rn &lt;action&gt;(RenameElement)&quot;运行let g:WhichKeyDesc_RunOrRe_Run = &quot;&lt;leader&gt;ru 运行&quot;map &lt;leader&gt;ru &lt;action&gt;(Run)&quot;========== s ==========let g:WhichKeyDesc_Show = &quot;&lt;leader&gt;s 显示&amp;停止&quot;&quot;显示当前打开文件的文件结构弹出窗口，其中包含文件中的类、方法、字段等结构(Alt + 7)let g:WhichKeyDesc_Show_FileStructure = &quot;&lt;leader&gt;ss 显示文件结构&quot;nmap &lt;leader&gt;ss &lt;action&gt;(FileStructurePopup)&quot;显示书签（Bookmarks）工具窗口，其中包含当前文件中设置的书签列表(Ctrl + F11)let g:WhichKeyDesc_Show_Bookmarks = &quot;&lt;leader&gt;sb 显示书签工具窗口&quot;nmap &lt;leader&gt;sb &lt;action&gt;(ShowBookmarks)&quot;用于显示方法或函数的参数信息(Ctrl + p)let g:WhichKeyDesc_Show_ParameterInfo = &quot;&lt;leader&gt;sp 显示方法或函数的参数信息&quot;nmap &lt;leader&gt;sp &lt;action&gt;(ParameterInfo)&quot;Stoplet g:WhichKeyDesc_Show_Stop = &quot;&lt;leader&gt;st 停止运行&quot;nmap &lt;leader&gt;st &lt;action&gt;(Stop)&quot;========= t ==========&quot;翻译let g:WhichKeyDesc_Translate = &quot;&lt;leader&gt;t 翻译&quot;nmap &lt;leader&gt;t &lt;action&gt;($EditorTranslateAction)vmap &lt;leader&gt;t &lt;action&gt;($EditorTranslateAction)&quot;========== w ==========let g:WhichKeyDesc_Windows = &quot;&lt;leader&gt;w 窗口&quot;let g:WhichKeyDesc_Windows_Move = &quot;&lt;leader&gt;wm 移动窗口&quot;&quot;向右拆分标签页let g:WhichKeyDesc_Windows_Move_MoveTabRight = &quot;&lt;leader&gt;wml 向右拆分标签页&quot;nmap &lt;leader&gt;wml &lt;action&gt;(MoveTabRight)&quot;向下拆分标签页let g:WhichKeyDesc_Windows_Move_MoveTabDown = &quot;&lt;leader&gt;wmd 向下拆分标签页&quot;nmap &lt;leader&gt;wmd &lt;action&gt;(MoveTabDown)&quot;在另一边打开（前提是有另一边的分割窗口）let g:WhichKeyDesc_Windows_Move_MoveEditorToOppositeTabGroup = &quot;&lt;leader&gt;wmo 在另一边打开&quot;nmap &lt;leader&gt;wmo &lt;action&gt;(MoveEditorToOppositeTabGroup)&quot;向右复制标签页let g:WhichKeyDesc_Windows_Move_SplitVertically = &quot;&lt;leader&gt;wmc 向右复制标签页&quot;nmap &lt;leader&gt;wmc &lt;action&gt;(SplitVertically)&quot;取消所有分割窗口let g:WhichKeyDesc_Windows_UnsplitAll = &quot;&lt;leader&gt;wa 取消所有分割窗口&quot;nmap &lt;leader&gt;wa &lt;action&gt;(UnsplitAll)&quot;关闭当前窗口或分割窗格let g:WhichKeyDesc_Windows_closeActiveWindow = &quot;&lt;leader&gt;wc 关闭当前分割窗口&quot;nmap &lt;leader&gt;wc &lt;c-w&gt;c&quot;取消拆分当前分割窗口let g:WhichKeyDesc_Windows_Unsplit = &quot;&lt;leader&gt;wu 取消拆分当前分割窗口&quot;nmap &lt;leader&gt;wu &lt;action&gt;(Unsplit)&quot;隐藏/显示窗口let g:WhichKeyDesc_Windows_Hide_HideActiveWindow = &quot;&lt;leader&gt;ww 隐藏/显示活动窗口&quot;nmap &lt;leader&gt;ww &lt;action&gt;(HideAllWindows)&quot;========== y ==========&quot;普通模式下将 &quot;+ (复制到剪切板）简化为 &lt;leader&gt;ylet g:WhichKeyDesc_CopyClipboard = &quot;&lt;leader&gt;y 复制到剪切板&quot;vmap &lt;leader&gt;y &quot;+y&quot;可视模式下将 &quot;+ (复制到剪切板）简化为 &lt;leader&gt;ylet g:WhichKeyDesc_CopyClipboard= &quot;&lt;leader&gt;y 复制到剪切板&quot;nmap &lt;leader&gt;y &quot;+yy&quot;========== z ==========let g:WhichKeyDesc_Zip = &quot;&lt;leader&gt;z 折叠&quot;&quot;展开所有代码折叠区域(Ctrl + Shift + 加号键)let g:WhichKeyDesc_Zip_unZipAll = &quot;&lt;leader&gt;zo 展开所有折叠&quot;nmap &lt;leader&gt;zo &lt;action&gt;(ExpandAllRegions)&quot;折叠所有代码折叠区域(Ctrl + Shift + 减号键)let g:WhichKeyDesc_Zip_ZipAll = &quot;&lt;leader&gt;zc 折叠所有代码&quot;nmap &lt;leader&gt;zc &lt;action&gt;(CollapseAllRegions)&quot; ================================================================================================&quot; 🌸🌸🌸 NERDTree 🌸🌸🌸&quot; ================================================================================================&quot;&lt;C-w-w&gt;：在多个打开的编辑器窗口之间切换&quot;在目录中，按下 go 打开文件并保持光标在目录&quot;在目录中，按下 gi 以上下并排窗口形式打开文件(并关闭目录)&quot;在目录树中，使用空格预览文件&quot;光标在目录时，按Esc回到编辑器&quot;编辑器和目录间切换存在许多功能类似的快捷键，相似但不完全相同&quot;仅 打开/关闭 目录推荐使用&lt;leader&gt;wo 其次 Alt + 1&quot;按下 &lt;leader&gt;nn 将使焦点转移到 NERDTree 窗口nnoremap &lt;leader&gt;nn :NERDTreeFocus&lt;CR&gt;let g:WhichKeyDesc_NERDTreeOrNo_NERDTreeFocus = &quot;&lt;leader&gt;nn 转移到目录树&quot;&quot;按下 &lt;C-n&gt; 将打开 NERDTree 文件资源管理器(==&lt;leader&gt;nn)nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;&quot;按下 &lt;C-t&gt; 将切换 NERDTree 文件资源管理器的显示状态，即打开或关闭 NERDTree(不建议)nnoremap &lt;C-t&gt; :NERDTreeToggle&lt;CR&gt;&quot;按下 &lt;C-f&gt; 将在 NERDTree 文件资源管理器中定位当前编辑文件所在的节点，并使其可见(&lt;leader&gt;fl)nnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt;&quot; ================================================================================================&quot; 🌸🌸🌸 Easymotion 🌸🌸🌸&quot; ================================================================================================let g:WhichKeyDesc_easymotionkey = &quot;&lt;leader&gt;&lt;leader&gt; 快速跳转插件&quot;&quot;普通模式输入s后输入要跳转到单词首字母(或多输入几个字母)&quot;nmap s &lt;Plug&gt;(easymotion-bd-f)nmap s &lt;Plug&gt;(easymotion-s2)let g:WhichKeyDesc_easymotion = &quot;s 快速跳转&quot;\u0013","link":"/2025/04/02/pycharm/"},{"title":"","text":"2025年北京市中招各区分数段人数统计2025-7-9 东城.md 西城.md 朝阳 丰台 石景山 海淀 门头沟 燕山 房山 通州 顺义 昌平 大兴 怀柔 平谷 密云 延庆 经开","link":"/2025/07/09/2025%E5%B9%B4%E5%8C%97%E4%BA%AC%E5%B8%82%E4%B8%AD%E6%8B%9B%E5%90%84%E5%8C%BA%E5%88%86%E6%95%B0%E6%AE%B5%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/"}],"tags":[],"categories":[],"pages":[{"title":"about","text":"#About meNickNameTEL","link":"/about/index.html"}]}